start poiss_planch_sample(theta=10, random_state=.);
	if random_state=. then do;
		call streaminit(0);
		random_state=ceil( (2**31 - 1)*rand("uniform") ); 
	end;
	else do;
		random_state=abs(ceil(random_state));
	end;
		

	if theta <0 then do;

		/*DO POPRAWIENIA NA BŁĄD - TERAZ JAK DAM ERROR TO SIE WYWALA*/
		print "THETA MUST BE greater then 0";

	end;
		
	N=0;

	do while(N=0);
		N=ranpoi(random_state, theta);
	end;

	A=J(N,2,0);

	do i=1 to N;
	A[i,1]=i;
	A[i,2] = ranuni(random_state);
	end;

	call sort(A,2);
	/*A[:,1]-random_permutation*/
	res = A[1,1];

	do i=2 to N;
		x=A[i,1];
		ifleave=0;
		do j=1 to nrow(res);

		/*find index of last non-zero element in a row (or first element if there is only zero in that row)*/
			index  = 1;
			done=0;
			do while(done=0);
				if res[j,index]=0 then done=1;
				else if index=ncol(res) then done=1;
				else index=index+1;
			end;
			if res[j,ncol(res)]=0 & index^=1 then index=index-1;
			if x>=res[j,index] then do;
				/*if there is no column available add column of zeros*/
				if index=ncol(res) then do;
					res=insert(res,J(nrow(res),1,0),0,ncol(res)+1);
				end;
				res[j,index+1]=x;
				ifleave=1;
				goto leave;
			end;
			else do;
				pom=0;
				id=1;
				do while(pom=0);
					if x>res[j,id] then do;
						id=id+1;
					end;
					else do;
						tmp=res[j,id];
						res[j,id]=x;
						x=tmp;
						pom=1;
					end;

				end;

			end;


		end;
		if ifleave=0 then do;
			new_row = x;

			if ncol(res)^=1 then new_row = insert(x,J(1,ncol(res)-1,0),0,2);
			res=insert(res,new_row,nrow(res)+1);

		end;
		


		leave:

	end;



	is_positive=J(nrow(res), ncol(res),0);
	do i=1 to nrow(res);
		do j=1 to ncol(res);
			if res[i,j]^=0 then is_positive[i,j]=1;
		end;
	end;

	young_diag = is_positive[,+]`;

	sampl=J(1,ncol(young_diag),0);
	do i=1 to ncol(young_diag);
		sampl[1,i]=young_diag[1,i]-i + 0.5;

	end;
	return sampl;
finish;



start carries_sample(base=10, size=100, random_state=.);

	if base <2 | size <2 then do;
		print "Base less then 2 or size less then 2";
		return;
	end;



	if random_state=. then do;
		call streaminit(0);
		random_state=ceil( (2**31 - 1)*rand("uniform") ); 
	end;
	else do;
		random_state=abs(ceil(random_state));

	end;

	/*If user gives a float as base or size, they are replaced by the closest higher integer*/
	base=ceil(base);
	size=ceil(size);

	call streaminit(random_state);
	A=J(size,3,0);
	cumsum=0;
	do i=1 to size;
	A[i,1]=rand('integer',1,base);
	cumsum=cumsum+A[i,1];
	A[i,2]=cumsum;
	A[i,3] = mod(cumsum,base);
	end;
	rests_wo_first = A[2:size,3];
	rests_wo_last= A[1:size-1,3];


	carries = {0};

	j=1;

	do i=1 to size-1;
		if rests_wo_last[i]>rests_wo_first[i] then do;
			carries = insert(carries, i, j);
			j=j+1;

		end;

	end;
	carries= carries[1:nrow(carries)-1];
	return carries`;
finish;

start descent_sample(size=10, random_state=123);

	if random_state=. then do;
		call streaminit(0);
		random_state=ceil( (2**31 - 1)*rand("uniform") ); 
	end;
	else do;
		random_state=abs(ceil(random_state));

	end;

	if size<2 then do;
		print "size<2";
		return;
	end;

	call streaminit(random_state);
	A=J(size,2,0);
	do i=1 to size;
	A[i,1]=i;
	A[i,2] = ranuni(random_state);
	end;

	call sort(A,2);



	perm_wo_first = A[2:size,1];
	perm_wo_last= A[1:size-1,1];

	descent = {0};

	j=1;

	do i=1 to size-1;
		if perm_wo_last[i]>perm_wo_first[i] then do;
			descent = insert(descent, i, j);
			j=j+1;

		end;

	end;
	descent = descent[1:nrow(descent)-1];
	return t(descent);
finish;


start virtual_descent_sample(size=100, x0=0.5, random_state=.);

	if size<2 | x0<=0 | x0 >=1 then do;
	 print "size less then 2 or x0 less then 0 or x0 greater then 1";
	end;

	if random_state=. then do;
		call streaminit(0);
		random_state=ceil( (2**31 - 1)*rand("uniform") ); 
	end;
	else do;
		random_state=abs(ceil(random_state));

	end;

	call streaminit(random_state);

	A=J(size+1,2,0);
	do i=1 to size+1;
	A[i,1]=i;
	A[i,2] = ranuni(random_state);
	end;

	call sort(A,2);



	perm_wo_first = A[2:size+1,1];
	perm_wo_last= A[1:size,1];


	X=J(size,1,0);

	do i=1 to size;
		if perm_wo_last[i]>perm_wo_first[i] then do;
			X[i]=1;
		end;
		else do;
			X[i]=0;
		end;
	end;


	Y = J(size+1,2,0);

	do i=1 to size+1;
	Y[i,1]=rand('BINOMIAL', x0, 2);
	if Y[i,1]^=1 then Y[i,2]=1;
	else Y[i,2]=0;
	end;




	virt_descent={0};
	j=1;
	do i=1 to size;
		if (((Y[i,2]=0) & (Y[i+1,2]=1)) | ((Y[i,2]=0) & (Y[i+1,2]=0) & (X[i,1]=1))) then do;
			virt_descent = insert(virt_descent, i-1, j);
			j=j+1;
		end;
	end;

	virt_descent = virt_descent[1:nrow(virt_descent)-1];

	return virt_descent`;
finish;
