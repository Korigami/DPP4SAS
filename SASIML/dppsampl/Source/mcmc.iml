start generate_K_kernel(size,rank,random_state=.);
	if random_state=. then random_state=0;

	call streaminit(random_state);
	x = J(rank*size,1);
	do i=1 to rank*size;
		x[i] = rand('uniform');
	end;
	x = shape(x,size,rank);
	call qr(q, r, piv, lindep, x);
	I = diag(j(size,1))[,1:rank];
	q = q*I;
	K = q*q`;
	return K;
finish;

/*
kernel=generate_K_kernel(10,8);*/


start initialize_AED_sampler(kernel,random_state=., nb_trials=100);
	
	N=nrow(kernel);
	groundset = J(N,1,0);
	do i=1 to N;
		groundset[i]=i;
	end;
	det_s0=0;


	do i=1 to nb_trials;
		if det_s0 > 0.000001 then do;
			return s0`;

		end;

		else do;
			no_of_sel = 0;
			s=J(N,1,0);
			R=J(2*N,1, 0);
			
			do while (no_of_sel<N);
				x = round(2*N*rand("UNIFORM")+0.5);
				if R[x] ^= 1 then do;
					R[x]=1;
					no_of_sel = no_of_sel +1;
					s[no_of_sel]=x;
				end;
			end;
			idx = loc(s<=N);
			s0=s[idx];
			det_s0=det(kernel[s0,s0]);
		end;



	end;

	return 0;
finish;




start add_exchange_delete_sampler(kernel,s0=., random_state=., nb_iter=10);
	
	/*s0 should be a row with initial values from the value set*/
	call streaminit(random_state);
	call streamrewind(random_state);

	if s0=. then do;
		s0 = initialize_AED_sampler(kernel);	
		print s0;
	end;

	s0=s0`;
	N=nrow(kernel);
	groundset = J(N,1,0);
	do i=1 to N;
		groundset[i]=i;
	end;
	det_s0=det(kernel[s0,s0]);
	do idx=1 to nb_iter;
		s1=s0;
		/*random index to delete*/
		s_ind = round(nrow(s0)*rand("UNIFORM")+0.5);
		el_to_del = s1[s_ind];
		/*random index to add*/
		not_selected = setdif(groundset, s1);
		t=not_selected[round(nrow(not_selected)*rand("UNIFORM")+0.5)];

		U=rand("UNIFORM");
		ratio = nrow(s0)/N;
		print U;
		add_prob = (0.5 * (1-ratio)**2);
		print add_prob;
		ex_prob1 = (0.5 * (1-ratio)**2);
		print ex_prob1;
		ex_prob2 = (0.5 * (1-ratio));
		print ex_prob2;
		del_prob1 = (0.5*(1-ratio));
		print del_prob1;
		del_prob2 = (0.5*(ratio**2 + (1-ratio)));
		print del_prob2;

		if U < (0.5 * (1-ratio)**2) then do;
			

			s1 = insert(s1, t, nrow(s1)+1);
			det_s1=det(kernel[s1,s1]);
			rand_num = rand("UNIFORM");
			if rand_num < (det_s1/det_s0 * (nrow(s0) + 1)/(N-nrow(s0))) then do;
				print "ADD";
				s0=s1;
				det_s0=det_s1;

			end;

		end;
		else if (0.5 * (1-ratio)**2) <= U & U < (0.5 * (1-ratio)) then do;
			
			s1[s_ind]=t;
			det_s1=det(kernel[s1,s1]);
			rand_num = rand("UNIFORM");
			if rand_num < (det_s1/det_s0) then do;
				print "EXCHANGE";
				s0=s1;
				det_s0 = det_s1;

			end;

		end;
		else if (0.5*(1-ratio))<=U & U < (0.5*(ratio**2 + (1-ratio))) then do;
			
			s1 = s1[loc(s1^=el_to_del)];
			det_s1=det(kernel[s1,s1]);
			rand_num = rand("UNIFORM");
			if rand_num < (det_s1 / det_s0 * nrow(s0) / (N - (nrow(s0)-1))) then do;
				print "DELETE";
				s0=s1;
				det_s0 = det_s1;
			end;
			
		end;
		else do;
			s0 = s0;
		end;

		print s0;



	end;

	return s0;




finish;

/*
s = add_exchange_delete_sampler(kernel);*/



start initialize_AD_and_E_sampler(kernel, size=.,random_state=.,nb_trials=100);

N=nrow(kernel);

groundset = J(N,1,0);
do i=1 to N;
	groundset[i]=i;
end;

	det_s0=0;


	do i=1 to nb_trials;
		if det_s0 > 0.0000001 then do;
			return s0`;

		end;

		else do;
			if size=. then new_size = round(N*rand('UNIFORM')+0.5);
			else new_size=size;
			no_of_sel = 0;
			s0=J(new_size,1,0);
			R=J(N,1, 0);
			
			do while (no_of_sel<new_size);
				x = round(N*rand("UNIFORM")+0.5);
				if R[x] ^= 1 then do;
					R[x]=1;
					no_of_sel = no_of_sel +1;
					s0[no_of_sel]=x;
				end;
			end;

			det_s0=det(kernel[s0,s0]);

		end;



	end;

	return 0;
finish;



start add_delete_sampler(kernel, s0=., size_s0=., random_state=., nb_iter=100, nb_trials=100);

	call streaminit(random_state);
	call streamrewind(random_state);
	if s0=. then do;
	s0 = initialize_AD_and_E_sampler(kernel, size_s0, random_state, nb_trials);
	end;
	s0=s0`;
	N=nrow(kernel);
	det_s0=det(kernel[s0,s0]);
	do idx = 1 to nb_iter;
		rand_num = rand("UNIFORM");
		if rand_num<0.5 then do;
			s1=s0;
			s = round(N*rand("UNIFORM")+0.5);
			if any(s0=s) then do;
				/*remove*/
				s1 = s1[loc(s1^=s)];
			end;
			else do;
			 /*add*/
				s1=insert(s1, s, nrow(s1)+1);
			end;
			det_s1 = det(kernel[s1,s1]);
			rand_num2 = rand("UNIFORM");

			if rand_num2 < (det_s1/det_s0) then do;
				s0=s1;
				det_s0=det_s1;

			end;

			else do;
				s0 = s0;
			end;



		end;

		print s0;
		

	end;

	return s0;

finish;

/*
s = add_delete_sampler(kernel);*/


start basic_exchange_sampler(kernel, s0=., size_s0 = ., random_state=. , nb_iter=100, nb_trials=100);
	call streaminit(random_state);
	call streamrewind(random_state);
	if s0=. then do;
		s0 = initialize_AD_and_E_sampler(kernel, size_s0, random_state, nb_trials)`;
	end;
	N = nrow(kernel);
	det_s0 = det(kernel[s0,s0]);
	groundset = J(N,1,0);
	do i=1 to N;
		groundset[i]=i;
	end;
	do idx = 1 to nb_iter;
		rand_num = rand("UNIFORM");
		if rand_num<0.5 then do;
			s1=s0;

			s_ind = round(nrow(s0)*rand("UNIFORM")+0.5);

			not_selected = setdif(groundset, s1);
			print not_selected;
			t=not_selected[round(nrow(not_selected)*rand("UNIFORM")+0.5)];
			print t;
			
			s1[s_ind]=t;

			det_s1 = det(kernel[s1,s1]);
			rand_num2 = rand("UNIFORM");

			if rand_num2 < (det_s1/det_s0) then do;
				s0=s1;
				det_s0=det_s1;

			end;

			else do;
				s0 = s0;
			end;



		end;

		print s0;
		

	end;

return s0;

finish;
/*
s2 = basic_exchange_sampler(kernel);*/